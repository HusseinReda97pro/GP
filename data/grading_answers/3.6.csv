answers,score
" A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",5
 badly designed algorithyms. using recursion for a non recursive problem.,2.5
 Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5
" Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",5
 Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion. ,5
 Not having a base case that returns a base value.,4
 Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,5
 no base caseno change in values.,4.5
" If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5
 Omitting the base case or incorrectly calling the recursive step.,5
 The recursive problem cannot be reduced to reach the base case.,4.5
" Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5
 Not having the proper case to leave the recursion,4
" no base case, or the recursive calls do not converge to the base case",5
" No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5
" If the recursion function never reaches or successfully defines the base case it will recurse forever.This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",5
" not creating a base case, or in the case where the base case will never be met.",5
 improper handling of cases such that not all possible values are able to be handled.,3.5
 There is no base case.The recursion step doesn't reduce the problem during each recursive call.,4.5
" no base case, as in a single return that does not include calling the function again.  a static value to end at.",3.5
" Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5
 omitting the base case or writing the recursive call so that it does not converge upon the base case.,5
" Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5
 Infinite recursion may occur if no base case is defined or if the call is not varied.,4.5
" Not having a base case, or building a recursion process that doesn't converge on the base case.",5
" Either omitting the base case, or writing the recursion step incorerectly ",5
 no base caseor if the programmar does not define the base case as the simplest case and it never gets reached,5
 No easily reached base case and no base case at all,5
 function is never allowed to reach the 'base case',5
" it has no base case, or the base case is never met",5
 recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,3
