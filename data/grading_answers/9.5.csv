,answers,score
0," List based.  Because it is on the run time order of N, also it does not have a limited size like an array does",4.5
1, linked list based. because it doesn't store the items linearly in memory but instead as individual blocks.,5
2, List based is preferred because there are no size restrictions.,5
3," A list-based implementation would be preferred. The array is slightly more complicated, where you would need to keep track of both front and rear.",3.5
4, List-based. Array-based queues have a way to complicate things to an extent.,3.5
5," List-based. Less code, and no size limitation/declaration... which means it is also more efficient and versatile.",5
6, list based is prefered because it doesn't have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last.,5
7, List based is preferred because there are space issues with array based due to rightward drift.  The fix for rightward drift requires constant shifting of the queue data.,5
8," Similar to stacks, linked lists are preferable for queues because the size can be adjusted.",5
9, array-based is preferred because all you have to keep track of is the array itself and the count.,1.5
10, list because its size is not defined,5
11," List-based, because when you enqueue (or dequeue depending upon your implementation) you would need to shift all elements to another space with an array, causing a horrid time complexity for large data sets, where as you can just modify the pointers in a list for a constant time complexity",4.5
12," queue's are best with lists, especially if the tail is kept track of, as the list can be dynamically grown without losing track of the head or tail.",5
13," list based, its much simpler and the run time is better",4
14," list based, because of the lessened memory usage initially, and the increased limits on how large the que can become.",5
15, List-based because it's not fixed size.,5
16," list, its dynamic and no size needs to be declared",5
17," list bases implementatoin is best because you use pointers to keep track of the front and back pointers. Easier to maintain, but uses more memory",5
18, list based.  It can dynamically grow and has fewer restrictions.,5
19, list based is preferred because memory allocation is not an issue,5
20," List based solutions are preferred, because they allow for queues of any size. ",5
21," I think array based is batter, because of fixed size, but on other had list base is more flaxible. You do not have to worry about the size",4
22, list based because you dont need to shift the elements like you do in array based queues,4
23, List-based because memory isn't constricted.<br>,5
24," list based because the array based has to have a fixed size, it cannot be added to or removed from as easily",5
25, list-based array is easier and more scalable,5
26, list based becuase an arrary based has to have an arrary size and needs to be pre-defined and can't be changed dynamically. ,5
